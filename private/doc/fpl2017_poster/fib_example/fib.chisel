class Fib extends Module {
  val io = IO(new Bundle {
    val out = Output(UInt(64.W))
    val rdy = Input(Bool())
    val vld = Output(Bool())
  })
  val sOut0 :: sOut1 :: sOutOthers :: Nil = Enum(3)
  val state = RegInit(init = sOut0)
  val out = Wire(UInt(64.W))
  val out_prev = RegNext(out)
  val out_prev2 = RegNext(out_prev)

  when (io.rdy) {
    io.vld := true.B
    switch (state) {
      is (sOut0) {
        out := 0.U
        state := sOut1
      }
      is (sOut1) {
        out := 1.U
        state := sOutOthers
      }
      is (sOutOthers) {
        out := out_prev + out_prev2
      }
    }
  }.otherwise(io.vld := false.B)
  io.out := RegNext(out)
}