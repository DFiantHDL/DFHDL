package DFiant.compiler
package ir
import printing.{Printer, NCCode}
import DFiant.internals.*
import scala.collection.immutable.ListMap

sealed trait DFType extends NCCode, Product, Serializable:
  val __width: Int

/////////////////////////////////////////////////////////////////////////////
// DFBool or DFBit
/////////////////////////////////////////////////////////////////////////////
sealed trait DFBoolOrBit extends DFType:
  final val __width = 1

case object DFBool extends DFBoolOrBit:
  def codeString(using Printer): String = "DFBool"
case object DFBit extends DFBoolOrBit:
  def codeString(using Printer): String = "DFBit"
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// DFBits
/////////////////////////////////////////////////////////////////////////////
final case class DFBits(val __width: Int) extends DFType:
  def codeString(using Printer): String = s"DFBits(${__width})"
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// DFEnum
/////////////////////////////////////////////////////////////////////////////
final case class DFEnum(
    val name: String,
    val __width: Int,
    val entries: ListMap[String, BigInt]
) extends DFType:
  def codeString(using Printer): String = name
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// DFVector
/////////////////////////////////////////////////////////////////////////////
final case class DFVector(
    cellType: DFType,
    cellDims: List[Int]
) extends DFType:
  val __width: Int = cellType.__width * cellDims.reduce(_ * _)
  def codeString(using Printer): String =
    s"${cellType.codeString}.X${cellDims.mkString("(", ", ", ")")}"
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// DFOpaque
/////////////////////////////////////////////////////////////////////////////
abstract class DFOpaque(name: String, actualType: DFType) extends DFType:
  final val __width: Int = actualType.__width
  final def codeString(using Printer): String = name
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// DFUnion
/////////////////////////////////////////////////////////////////////////////
final case class DFUnion(fieldsSet: Set[DFType]) extends DFType:
  val __width: Int = fieldsSet.head.__width
  def codeString(using Printer): String =
    fieldsSet.map(_.codeString).mkString(" | ")
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// DFStruct
/////////////////////////////////////////////////////////////////////////////
final case class DFStruct(
    name: String,
    fieldMap: ListMap[String, DFType]
) extends DFType:
  val __width: Int = fieldMap.values.map(_.__width).sum
  def codeString(using Printer): String = name
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// DFTuple
/////////////////////////////////////////////////////////////////////////////
final case class DFTuple(fieldList: List[DFType]) extends DFType:
  val __width: Int = fieldList.view.map(_.__width).sum
  def codeString(using Printer): String =
    fieldList.view.map(_.codeString).mkString("(", ", ", ")")
/////////////////////////////////////////////////////////////////////////////
