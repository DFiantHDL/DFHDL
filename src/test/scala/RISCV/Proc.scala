package RISCV
import DFiant._

trait Proc extends DFDesign {
  ////////////////////////////////////////////////////////////////////////
  // Fetch
  ////////////////////////////////////////////////////////////////////////
  private val pcGen = new PCGen {}
  private val pc = pcGen.getPCConn()
  private val pcPlus4 = pcGen.getPCPlus4Conn()

  private val imem = new IMem {}
  private val inst = imem.readConn(pc)
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Decode
  ////////////////////////////////////////////////////////////////////////
  private val decoder = new Decoder {}
  private val decodedInst = decoder.decodeConn(inst)
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Register File (Read)
  ////////////////////////////////////////////////////////////////////////
  private val regFile = new RegFile {}
  private val rs1_data = regFile.readConn1(decodedInst.rs1_addr)
  private val rs2_data = regFile.readConn2(decodedInst.rs2_addr)
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // ALU (Execute)
  ////////////////////////////////////////////////////////////////////////
  private val aluOp1 = DFBits[32].matchdf(decodedInst.rs1OpSel)
    .casedf(RS1OpSel.RegSource) {rs1_data}
    .casedf_                    {decodedInst.imm}
  private val aluOp2 = DFBits[32].matchdf(decodedInst.rs2OpSel)
    .casedf(RS2OpSel.RegSource) {rs2_data}
    .casedf(RS2OpSel.PC)        {pc}
    .casedf_                    {decodedInst.imm}
  private val alu = new ALU {}
  private val aluOut = alu.calcConn(aluOp1, aluOp2, decodedInst.shamt, decodedInst.aluSel)
  pcGen.updatePC(decodedInst.branchSel, rs1_data, rs2_data, decodedInst.imm)
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Memory
  ////////////////////////////////////////////////////////////////////////
  private val dmem = new DMem {}
  private val dmem_dataFromMem = dmem.readWriteConn(aluOut, rs2_data, decodedInst.mem_wren)
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Write Back
  ////////////////////////////////////////////////////////////////////////
  private val wbData = DFBits[32].matchdf(decodedInst.wbSel)
    .casedf(WriteBackSel.ALU)     {aluOut}
    .casedf(WriteBackSel.PCPlus4) {pcPlus4}
    .casedf_                      {dmem_dataFromMem}

  regFile.writeConn(decodedInst.rd_addr, wbData, decodedInst.rd_wren)
  ////////////////////////////////////////////////////////////////////////
}
