package RISCV
import DFiant._

trait Proc extends DFDesign {
  private val pc = DFUInt(32).init(0)
  private val pcbits = pc.bits

  ////////////////////////////////////////////////////////////////////////
  // Fetch
  ////////////////////////////////////////////////////////////////////////
  private val inst = DFBits(32)
  private val imem = new IMem {}
  imem.addr <> pcbits
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Decode
  ////////////////////////////////////////////////////////////////////////
  private val decoder = new Decoder {}
  decoder.inst <> imem.inst
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Register File (Read)
  ////////////////////////////////////////////////////////////////////////
  private val regFile = new RegFile {}
  regFile.rs1_addr <> decoder.rs1_addr
  regFile.rs2_addr <> decoder.rs2_addr
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // ALU (Execute)
  ////////////////////////////////////////////////////////////////////////
  private val aluOp1 = DFBits(32).matchdf(decoder.rs1OpSel)
    .casedf(RS1OpSel.RegSource){regFile.rs1_data}
    .casedf_ {decoder.imm}
  private val aluOp2 = DFBits(32).matchdf(decoder.rs2OpSel)
    .casedf(RS2OpSel.RegSource){regFile.rs2_data}
    .casedf(RS2OpSel.PC){pcbits}
    .casedf_ {decoder.imm}
  private val alu = new ALU {}
  alu.op1 <> aluOp1
  alu.op2 <> aluOp2
  alu.shamt <> decoder.shamt
  alu.aluSel <> decoder.aluSel
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Memory
  ////////////////////////////////////////////////////////////////////////
  private val dmem = new DMem {}
//  dmem.addr
  ////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////
  // Write Back
  ////////////////////////////////////////////////////////////////////////
  pc := pc + 4
  ////////////////////////////////////////////////////////////////////////
}
