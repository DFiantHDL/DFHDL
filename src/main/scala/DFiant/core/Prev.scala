package DFiant.core
import DFiant.internals._
import singleton.ops._
import singleton.twoface._

object Prev {
  trait Builder[L <: DFAny] {
    def apply[P](left : L, right : Natural.Checked[P]) : L
  }
  object Builder {
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // DFBits
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    implicit def fromDFBits[LW] : Builder[DFBits[LW]] = new Builder[DFBits[LW]] {
      def apply[P](left : DFBits[LW], right : Natural.Checked[P]) : DFBits[LW] =
        DFBits.alias(left, left.width, 0, -right, left.getInit)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // DFBool
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    implicit def fromDFBool : Builder[DFBool] = new Builder[DFBool] {
      def apply[P](left : DFBool, right : Natural.Checked[P]) : DFBool =
        DFBool.alias(left, 0, -right, left.getInit)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // DFUInt
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    implicit def fromDFUInt[LW] : Builder[DFUInt[LW]] = new Builder[DFUInt[LW]] {
      def apply[P](left : DFUInt[LW], right : Natural.Checked[P]) : DFUInt[LW] =
        DFUInt.alias(left, left.width, 0, -right, left.getInit)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }

}
